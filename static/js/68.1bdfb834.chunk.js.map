{"version":3,"file":"static/js/68.1bdfb834.chunk.js","mappings":"4PAGaA,GAAaC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAYE,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,4QAezBC,GAAcJ,EAAAA,EAAAA,IAAOK,EAAAA,GAAPL,CAAaM,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,iJAS3BI,GAAcP,EAAAA,EAAAA,IAAOQ,EAAAA,GAAPR,CAAoBS,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,yBAIlCO,EAAYV,EAAAA,GAAAA,IAAUW,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,4H,8BC7BtBS,EAAc,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAM,EAM5CC,EAAqB,SAAAH,GAAK,OAAIA,EAAMI,OAAQ,EAE5CC,GAAwBC,EAAAA,EAAAA,IACnC,CAACP,EAAaI,IACd,SAACF,EAAUM,GACT,OAAON,EAASM,QAAO,SAAAC,GAAO,OAC5BA,EAAQC,KAAKC,cAAcC,SAASJ,EAAOG,cAAc,GAE7D,I,mBCHIE,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CL,KAAMI,EAAAA,KAAaE,IAAI,GAAGC,IAAI,IAAIC,SAAS,sBAC3CC,OAAQL,EAAAA,KACLE,IAAI,EAAG,6BACPC,IAAI,GAAI,4BACRC,SAAS,0BAEDE,EAAc,WACzB,IAAMC,GAAWC,EAAAA,EAAAA,MACXpB,GAAWqB,EAAAA,EAAAA,IAAYvB,GAC7B,OACEwB,EAAAA,EAAAA,KAAC1B,EAAS,CAAA2B,UACRD,EAAAA,EAAAA,KAACE,EAAAA,GAAM,CACLC,cAAe,CACbjB,KAAM,GACNS,OAAQ,IAEVN,iBAAkBA,EAClBe,SAAU,SAACC,EAAQC,GAMjB,GALsB5B,EAAS6B,MAC7B,SAAAtB,GAAO,OACLA,EAAQC,KAAKC,gBAAkBkB,EAAOnB,KAAKC,eAC3CF,EAAQU,SAAWU,EAAOV,MAAM,IAGlC,OAAOa,MAAM,GAADC,OACPJ,EAAOnB,KAAI,QAAAuB,OAAOJ,EAAOV,OAAM,4BAGtCE,GAASa,EAAAA,EAAAA,KAAUC,EAAAA,EAAAA,GAAC,CAAC,EAAIN,KACzBC,EAAQM,WACV,EAAEX,UAEFY,EAAAA,EAAAA,MAAClD,EAAU,CAAAsC,SAAA,EACTY,EAAAA,EAAAA,MAAA,SAAAZ,SAAA,CAAO,QAELD,EAAAA,EAAAA,KAAChC,EAAW,CAAC8C,KAAK,OAAO5B,KAAK,OAAO6B,YAAY,kBACjDf,EAAAA,EAAAA,KAAC7B,EAAW,CAACe,KAAK,OAAO8B,UAAU,YAGrCH,EAAAA,EAAAA,MAAA,SAAAZ,SAAA,CAAO,UAELD,EAAAA,EAAAA,KAAChC,EAAW,CAAC8C,KAAK,SAAS5B,KAAK,SAAS6B,YAAY,eACrDf,EAAAA,EAAAA,KAAC7B,EAAW,CAACe,KAAK,SAAS8B,UAAU,YAEvChB,EAAAA,EAAAA,KAACiB,EAAAA,EAAM,CAACH,KAAK,SAASI,QAAQ,YAAWjB,SAAC,sBAOpD,EC/DakB,EAAOvD,EAAAA,GAAAA,GAASE,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,wBAGhBqD,EAAWxD,EAAAA,GAAAA,GAASM,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,iDAKpBO,EAAYV,EAAAA,GAAAA,IAAUS,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,sK,oBCFtBsD,EAAc,WACzB,IAAMxB,GAAWC,EAAAA,EAAAA,OACjBwB,EAAAA,EAAAA,YAAU,WACRzB,GAAS0B,EAAAA,EAAAA,MACX,GAAG,CAAC1B,IACJ,IAAM2B,GAAmBzB,EAAAA,EAAAA,IAAYjB,GACrC,OACEkB,EAAAA,EAAAA,KAAC1B,EAAS,CAAA2B,UACRD,EAAAA,EAAAA,KAACmB,EAAI,CAAAlB,SACFuB,EAAiBC,KAAI,SAAAxC,GAAO,OAC3B4B,EAAAA,EAAAA,MAACO,EAAQ,CAAAnB,SAAA,CACNhB,EAAQC,KAAK,KAAGD,EAAQU,QACzBK,EAAAA,EAAAA,KAACiB,EAAAA,EAAM,CACLS,MAAM,UACNC,QAAS,kBAAM9B,GAAS+B,EAAAA,EAAAA,IAAc3C,EAAQ4C,IAAI,EAAC5B,UAEnDD,EAAAA,EAAAA,KAAC8B,EAAAA,EAAS,QANC7C,EAAQ4C,GAQZ,OAKrB,EC9BaE,EAAUnE,EAAAA,GAAAA,IAAUE,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,iQAapBiE,EAAcpE,EAAAA,GAAAA,MAAYM,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,2FAM1BkE,EAAQrE,EAAAA,GAAAA,MAAYS,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,iD,UChBpBmE,EAAS,WACpB,IAAMrC,GAAWC,EAAAA,EAAAA,MACXjB,GAAUkB,EAAAA,EAAAA,IAAYnB,GAC5B,OACEiC,EAAAA,EAAAA,MAACkB,EAAO,CAAA9B,SAAA,EACND,EAAAA,EAAAA,KAACiC,EAAK,CAAAhC,SAAC,2BACPD,EAAAA,EAAAA,KAACgC,EAAW,CACVlB,KAAK,OACLqB,MAAOtD,EACPkC,YAAY,eACZqB,SAAU,SAAAC,GACRxC,GAASyC,EAAAA,EAAAA,GAAUD,EAAIE,OAAOJ,OAChC,MAIR,EChBe,SAASK,IACtB,OACE3B,EAAAA,EAAAA,MAAA,OAAAZ,SAAA,EACED,EAAAA,EAAAA,KAACJ,EAAW,KACZI,EAAAA,EAAAA,KAACkC,EAAM,KACPlC,EAAAA,EAAAA,KAACqB,EAAW,MAGlB,C","sources":["components/ContactForm/ContactForm.styled.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  font-size: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  padding: 10px;\n  width: 400px;\n  flex-wrap: wrap;\n  border: 1px solid #5d9969;\n  border-radius: 4px;\n  font-weight: bold;\n  align-content: center;\n  align-items: center;\n`;\n\nexport const StyledField = styled(Field)`\n  padding: 4px;\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: column;\n  align-content: flex-start;\n  border-radius: 4px;\n`;\n\nexport const StyledError = styled(ErrorMessage)`\n  color: red;\n`;\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-top: 20px;\n  margin-bottom: 10px;\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectItems = state => state.contacts.items;\n\nexport const selectLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectStatusFilter = state => state.filters;\n\nexport const selectVisibleContacts = createSelector(\n  [selectItems, selectStatusFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport {\n  StyledForm,\n  StyledField,\n  StyledError,\n  Container,\n} from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/accountFetch';\nimport { selectItems } from 'redux/contacts/selectors';\nimport Button from '@mui/material/Button';\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string().min(2).max(50).required('* Name is required'),\n  number: Yup.string()\n    .min(6, 'Phone number is too short')\n    .max(16, 'Phone number is too long')\n    .required('* Enter phone number'),\n});\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectItems);\n  return (\n    <Container>\n      <Formik\n        initialValues={{\n          name: '',\n          number: '',\n        }}\n        validationSchema={validationSchema}\n        onSubmit={(values, actions) => {\n          let isContactExists = contacts.find(\n            contact =>\n              contact.name.toLowerCase() === values.name.toLowerCase() ||\n              contact.number === values.number\n          );\n          if (isContactExists) {\n            return alert(\n              `${values.name} or ${values.number} is already in contacts`\n            );\n          }\n          dispatch(addContact({ ...values }));\n          actions.resetForm();\n        }}\n      >\n        <StyledForm>\n          <label>\n            Name\n            <StyledField type=\"text\" name=\"name\" placeholder=\"Jacob Mercer\" />\n            <StyledError name=\"name\" component=\"div\" />\n          </label>\n\n          <label>\n            Number\n            <StyledField type=\"number\" name=\"number\" placeholder=\"xxx-xx-xx\" />\n            <StyledError name=\"number\" component=\"div\" />\n          </label>\n          <Button type=\"submit\" variant=\"contained\">\n            Add contact\n          </Button>\n        </StyledForm>\n      </Formik>\n    </Container>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  gap: 16px;\n`;\nexport const ListItem = styled.li`\n  margin: 10px;\n  font-weight: bold;\n`;\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 400px;\n  border: 1px solid #5d9969;\n  border-radius: 4px;\n  margin: auto;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { List, ListItem, Container } from './ContactList.styled';\nimport { fetchContacts, deleteContact } from 'redux/contacts/accountFetch';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport { useEffect } from 'react';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport Button from '@mui/material/Button';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  const visibleQuizItems = useSelector(selectVisibleContacts);\n  return (\n    <Container>\n      <List>\n        {visibleQuizItems.map(contact => (\n          <ListItem key={contact.id}>\n            {contact.name}: {contact.number}\n            <Button\n              color=\"inherit\"\n              onClick={() => dispatch(deleteContact(contact.id))}\n            >\n              <ClearIcon />\n            </Button>\n          </ListItem>\n        ))}\n      </List>\n    </Container>\n  );\n};\n","import styled from 'styled-components';\nexport const Wrapper = styled.div`\n  overflow: hidden;\n  width: 400px;\n  display: flex;\n  flex-direction: column;\n  align-content: center;\n  flex-wrap: wrap;\n  align-items: center;\n  margin: auto;\n  border: 1px solid #5d9969;\n  border-radius: 4px;\n  margin-bottom: 10px;\n`;\nexport const FilterInput = styled.input`\n  width: 200px;\n  height: 35px;\n  margin-bottom: 16px;\n  border-radius: 4px;\n`;\nexport const Label = styled.label`\n  margin: 10px;\n  font-weight: bold;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { FilterInput, Label, Wrapper } from './Filter.styled';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { selectStatusFilter } from 'redux/contacts/selectors';\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filters = useSelector(selectStatusFilter);\n  return (\n    <Wrapper>\n      <Label>Find contacts by name</Label>\n      <FilterInput\n        type=\"text\"\n        value={filters}\n        placeholder=\"Type name...\"\n        onChange={evt => {\n          dispatch(setFilter(evt.target.value));\n        }}\n      />\n    </Wrapper>\n  );\n};\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\n\nexport default function Contacts() {\n  return (\n    <div>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n"],"names":["StyledForm","styled","Form","_templateObject","_taggedTemplateLiteral","StyledField","Field","_templateObject2","StyledError","ErrorMessage","_templateObject3","Container","_templateObject4","selectItems","state","contacts","items","selectStatusFilter","filters","selectVisibleContacts","createSelector","filter","contact","name","toLowerCase","includes","validationSchema","Yup","shape","min","max","required","number","ContactForm","dispatch","useDispatch","useSelector","_jsx","children","Formik","initialValues","onSubmit","values","actions","find","alert","concat","addContact","_objectSpread","resetForm","_jsxs","type","placeholder","component","Button","variant","List","ListItem","ContactList","useEffect","fetchContacts","visibleQuizItems","map","color","onClick","deleteContact","id","ClearIcon","Wrapper","FilterInput","Label","Filter","value","onChange","evt","setFilter","target","Contacts"],"sourceRoot":""}